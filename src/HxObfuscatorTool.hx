import sys.io.File;
using StringTools;

/**
 * In case you don't want to use closure compiler, this removes unnecessary chars from the build.
 * @author Mark Knol
 */
class HxObfuscatorTool
{
	public static function main() 
	{
		var args = Sys.args();
		var inputPath = args[0];
		if (inputPath == null)
		{
			throw 'Must pass inputPath';
		}
		
		var outputPath = args[1];
		
		if (outputPath == null) outputPath = inputPath;
		
		var content = File.getContent(inputPath);
		var initialSize = content.length;
		
		var lines = content.split("\n");
		var firstline = lines.shift(); // remove Haxe comment "// Generated by Haxe xx.xx.xx"
		if (firstline.startsWith("//")) {
			content = lines.join("\n");
			trace("removed first line");
		}
		
		content = content.replace('" + "', ""); // strip unconcatenated strings
		
		inline function minify(value:String) 
			return value
				.replace("\t", "")
				.replace("\n", "")
				.replace("\r", "")
				.replace(" ,", ",")
				.replace(", ", ",")
				.replace(" && ", "&&")
				.replace(" || ", "||")
				.replace(" = ", "=")
				.replace(" == ", "==")
				.replace(" ^= ", "^=")
				.replace(" != ", "!=")
				.replace(" += ", "+=")
				.replace(" -= ", "-=")
				.replace(" *= ", "*=")
				.replace(" /= ", "/=")
				.replace(" < ", "<")
				.replace(" > ", ">")
				.replace("; ", ";")
				.replace(" : ", ":")
				.replace(" / ", "/")
				.replace(" * ", "*")
				.replace(" + ", "+")
				.replace(" - ", "-")
				.replace(" & ", "&")
				.replace(" | ", "|")
				.replace(" ^ ", "^")
				.replace("  ", " ")
				.replace("{ ", "{")
				.replace("} ", "}")
				.replace(" {", "{")
				.replace(" }", "}")
				.replace(") ", ")")
				.replace("( ", "(")
				.replace(" )", ")")
				.replace(" (", "(")
				.replace(";}", "}");
			
		var ereg = ~/("|')(.*)(\1)/;
		var replaced = "";
		while(ereg.match(content))
		{
			replaced += minify(minify(ereg.matchedLeft())) + ereg.matched(1) + ereg.matched(2) + ereg.matched(3);
			content = ereg.matchedRight();
		}
	
		var content = replaced + minify(content);
		var minifiedSize = content.length;
		
		trace((Std.int((1 - minifiedSize / initialSize) * 1000) / 10) + '% smaller ($minifiedSize/$initialSize)');
		
		File.saveContent(outputPath, content);
	}
}